
//  Copyright (c) 2025 by Threshold Secrets LLC.
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;




//
// Namespace Goedel.Html
// Class FrameStruct
//


// Types
//   TopTypeType
//       Namespace
//   TypeType
//       Entry
//       Page
//       Menu
//       Selector
//       Class
//       SubClass
//       FieldItem
//       SubMenu
//       Property
//       Button
//       Chooser
//       Separator
//       Return
//       Is
//       Boolean
//       Integer
//       DateTime
//       String
//       Text
//       Image
//       Avatar
//       List
//       Count
//       Presentation
//       Show
//       Icon
//       Emphasis
//       ButtonProperty
//       ChooserOption
//       Section
//       SectionEntry
//       From
//   IdType
//       NamespaceT
//       EntryT
//   NamespaceType
//       Goedel.Html
//   ClassType
//       FrameStruct
//   NameType
//       Id
//       Entries
//       Type
//       Title
//       Parent
//       Field
//       Display
//       Of
//       To
//       Action
//       Sections
//   TokenType
//       Uid

#pragma warning disable IDE0022, IDE0066, IDE1006, IDE0059
namespace Goedel.Html {


    public enum FrameStructType {
        _Top,

        Namespace,
        Entry,
        Page,
        Menu,
        SubMenu,
        Selector,
        Class,
        SubClass,
        FieldItem,
        Property,
        ButtonProperty,
        Is,
        Show,
        List,
        Boolean,
        Integer,
        DateTime,
        String,
        Text,
        Image,
        Icon,
        Avatar,
        Count,
        Separator,
        Return,
        Emphasis,
        Button,
        Chooser,
        ChooserOption,
        Presentation,
        Section,
        SectionEntry,
        From,
        Field,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public FrameStructType _Tag ();

        public _Choice _Parent;
        public FrameStruct _Base;

		public abstract void Serialize (StructureWriter Output, bool tag);

    	public virtual void Init (_Choice parent) {
            _Parent = parent;
            _Base ??= parent?._Base;
			}

        

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice parent) {
			Init (parent);
            _Base = parent._Base;
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public ID<_Choice>				Id; 
        public List <Entry>           Entries = new List<Entry> ();

        public override FrameStructType _Tag () =>FrameStructType.Namespace;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (Entry _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Entry : _Choice {
        public ID<_Choice>				Id; 
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.Entry;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Entry");
				}

	        Output.WriteId ("Id", Id.ToString()); 
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Entry");
				}			
			}
		}

    public partial class Page : _Choice {
		public string					Title;
        public List <FieldItem>           Entries = new List<FieldItem> ();

        public override FrameStructType _Tag () =>FrameStructType.Page;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Page");
				}

			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Page");
				}			
			}
		}

    public partial class Menu : _Choice {
        public List <FieldItem>           Entries = new List<FieldItem> ();

        public override FrameStructType _Tag () =>FrameStructType.Menu;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Menu");
				}

			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Menu");
				}			
			}
		}

    public partial class SubMenu : _Choice {
		public string					Title;
        public List <FieldItem>           Entries = new List<FieldItem> ();

        public override FrameStructType _Tag () =>FrameStructType.SubMenu;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SubMenu");
				}

			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("SubMenu");
				}			
			}
		}

    public partial class Selector : _Choice {
        public List <FieldItem>           Entries = new List<FieldItem> ();

        public override FrameStructType _Tag () =>FrameStructType.Selector;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Selector");
				}

			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Selector");
				}			
			}
		}

    public partial class Class : _Choice {
        public List <Property>           Entries = new List<Property> ();

        public override FrameStructType _Tag () =>FrameStructType.Class;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Class");
				}

			Output.StartList ("");
			foreach (Property _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Class");
				}			
			}
		}

    public partial class SubClass : _Choice {
        public REF<_Choice>				Parent;
        public List <Property>           Entries = new List<Property> ();

        public override FrameStructType _Tag () =>FrameStructType.SubClass;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SubClass");
				}

	        Output.WriteId ("Parent", Parent.ToString());
			Output.StartList ("");
			foreach (Property _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("SubClass");
				}			
			}
		}

    public partial class FieldItem : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.FieldItem;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("FieldItem");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("FieldItem");
				}			
			}
		}

    public partial class Property : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.Property;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Property");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Property");
				}			
			}
		}

    public partial class ButtonProperty : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.ButtonProperty;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ButtonProperty");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("ButtonProperty");
				}			
			}
		}

    public partial class Is : _Choice {
        public REF<_Choice>				Parent;

        public override FrameStructType _Tag () =>FrameStructType.Is;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Is");
				}

	        Output.WriteId ("Parent", Parent.ToString());
			if (tag) {
				Output.EndElement ("Is");
				}			
			}
		}

    public partial class Show : _Choice {
        public REF<_Choice>				Field;
        public TOKEN<_Choice>			Display;

        public override FrameStructType _Tag () =>FrameStructType.Show;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Show");
				}

	        Output.WriteId ("Field", Field.ToString());
	        Output.WriteId ("Display", Display.ToString());
			if (tag) {
				Output.EndElement ("Show");
				}			
			}
		}

    public partial class List : _Choice {
        public REF<_Choice>				Of;

        public override FrameStructType _Tag () =>FrameStructType.List;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("List");
				}

	        Output.WriteId ("Of", Of.ToString());
			if (tag) {
				Output.EndElement ("List");
				}			
			}
		}

    public partial class Boolean : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Boolean;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Boolean");
				}

			if (tag) {
				Output.EndElement ("Boolean");
				}			
			}
		}

    public partial class Integer : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Integer;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Integer");
				}

			if (tag) {
				Output.EndElement ("Integer");
				}			
			}
		}

    public partial class DateTime : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.DateTime;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("DateTime");
				}

			if (tag) {
				Output.EndElement ("DateTime");
				}			
			}
		}

    public partial class String : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.String;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("String");
				}

			if (tag) {
				Output.EndElement ("String");
				}			
			}
		}

    public partial class Text : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Text;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Text");
				}

			if (tag) {
				Output.EndElement ("Text");
				}			
			}
		}

    public partial class Image : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Image;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Image");
				}

			if (tag) {
				Output.EndElement ("Image");
				}			
			}
		}

    public partial class Icon : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Icon;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Icon");
				}

			if (tag) {
				Output.EndElement ("Icon");
				}			
			}
		}

    public partial class Avatar : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Avatar;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Avatar");
				}

			if (tag) {
				Output.EndElement ("Avatar");
				}			
			}
		}

    public partial class Count : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Count;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Count");
				}

			if (tag) {
				Output.EndElement ("Count");
				}			
			}
		}

    public partial class Separator : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Separator;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Separator");
				}

			if (tag) {
				Output.EndElement ("Separator");
				}			
			}
		}

    public partial class Return : _Choice {
        public REF<_Choice>				To;

        public override FrameStructType _Tag () =>FrameStructType.Return;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Return");
				}

	        Output.WriteId ("To", To.ToString());
			if (tag) {
				Output.EndElement ("Return");
				}			
			}
		}

    public partial class Emphasis : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Emphasis;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Emphasis");
				}

			if (tag) {
				Output.EndElement ("Emphasis");
				}			
			}
		}

    public partial class Button : _Choice {
        public REF<_Choice>				Action;
		public string					Title;
        public List <ButtonProperty>           Entries = new List<ButtonProperty> ();

        public override FrameStructType _Tag () =>FrameStructType.Button;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Button");
				}

	        Output.WriteId ("Action", Action.ToString());
			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (ButtonProperty _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Button");
				}			
			}
		}

    public partial class Chooser : _Choice {
        public List <ChooserOption>           Entries = new List<ChooserOption> ();

        public override FrameStructType _Tag () =>FrameStructType.Chooser;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Chooser");
				}

			Output.StartList ("");
			foreach (ChooserOption _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Chooser");
				}			
			}
		}

    public partial class ChooserOption : _Choice {
        public TOKEN<_Choice>			Action;
		public string					Title;

        public override FrameStructType _Tag () =>FrameStructType.ChooserOption;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ChooserOption");
				}

	        Output.WriteId ("Action", Action.ToString());
			Output.WriteAttribute ("Title", Title);
			if (tag) {
				Output.EndElement ("ChooserOption");
				}			
			}
		}

    public partial class Presentation : _Choice {
        public TOKEN<_Choice>			Id;
        public List <Section>           Sections = new List<Section> ();

        public override FrameStructType _Tag () =>FrameStructType.Presentation;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Sections) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Presentation");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (Section _e in Sections) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Presentation");
				}			
			}
		}

    public partial class Section : _Choice {
        public TOKEN<_Choice>			Id;
        public List <FieldItem>           Entries = new List<FieldItem> ();

        public override FrameStructType _Tag () =>FrameStructType.Section;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Section");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Section");
				}			
			}
		}

    public partial class SectionEntry : _Choice {
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.SectionEntry;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SectionEntry");
				}

	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("SectionEntry");
				}			
			}
		}

    public partial class From : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.From;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("From");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("From");
				}			
			}
		}

    public partial class Field : _Choice {
        public TOKEN<_Choice>			Id;

        public override FrameStructType _Tag () =>FrameStructType.Field;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Field");
				}

	        Output.WriteId ("Id", Id.ToString());
			if (tag) {
				Output.EndElement ("Field");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() =>  Label = null;

        public override FrameStructType _Tag () => FrameStructType._Label;

		public override void Serialize (StructureWriter Output, bool tag) =>Output.WriteId ("ID", Label.ToString());
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Id,				
		Namespace__Entries,				
		Entry_Start,
		Entry__Id,				
		Entry__Type,				
		Page_Start,
		Page__Title,				
		Page__Entries,				
		Menu_Start,
		Menu__Entries,				
		SubMenu_Start,
		SubMenu__Title,				
		SubMenu__Entries,				
		Selector_Start,
		Selector__Entries,				
		Class_Start,
		Class__Entries,				
		SubClass_Start,
		SubClass__Parent,				
		SubClass__Entries,				
		FieldItem_Start,
		FieldItem__Id,				
		FieldItem__Type,				
		Property_Start,
		Property__Id,				
		Property__Type,				
		ButtonProperty_Start,
		ButtonProperty__Id,				
		ButtonProperty__Type,				
		Is_Start,
		Is__Parent,				
		Show_Start,
		Show__Field,				
		Show__Display,				
		List_Start,
		List__Of,				
		Boolean_Start,
		Integer_Start,
		DateTime_Start,
		String_Start,
		Text_Start,
		Image_Start,
		Icon_Start,
		Avatar_Start,
		Count_Start,
		Separator_Start,
		Return_Start,
		Return__To,				
		Emphasis_Start,
		Button_Start,
		Button__Action,				
		Button__Title,				
		Button__Entries,				
		Chooser_Start,
		Chooser__Entries,				
		ChooserOption_Start,
		ChooserOption__Action,				
		ChooserOption__Title,				
		Presentation_Start,
		Presentation__Id,				
		Presentation__Sections,				
		Section_Start,
		Section__Id,				
		Section__Entries,				
		SectionEntry_Start,
		SectionEntry__Type,				
		From_Start,
		From__Id,				
		From__Type,				
		Field_Start,
		Field__Id,				
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Html._Choice     Token;
        }

    public partial class FrameStruct : Goedel.Registry.Parser{
        public List <Goedel.Html._Choice>        Top;
        public Registry	<Goedel.Html._Choice>	Registry;

        public bool StartOfEntry {get;  private set;}

        StateCode								State;
        Goedel.Html._Choice				Current;
        List <_StackItem>						Stack;


        public static FrameStruct Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new FrameStruct() {
				Options = Options
				};

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
            Result.Init ();
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
                Entry._Base = this;
				Entry._InitChildren (null);
				}
			}

        public FrameStruct() {
            Top = new List<Goedel.Html._Choice> () ;
            Registry = new Registry <Goedel.Html._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            StartOfEntry = true;

			TYPE__NamespaceT = Registry.TYPE ("NamespaceT"); 
			TYPE__EntryT = Registry.TYPE ("EntryT"); 
			TYPE__Uid = Registry.TYPE ("Uid"); 



            }



        public TYPE<Goedel.Html._Choice> TYPE__NamespaceT ;
        public TYPE<Goedel.Html._Choice> TYPE__EntryT ;
        public TYPE<Goedel.Html._Choice> TYPE__Uid ;

        private Goedel.Html._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Entry": return NewEntry();
                case "Page": return NewPage();
                case "Menu": return NewMenu();
                case "SubMenu": return NewSubMenu();
                case "Selector": return NewSelector();
                case "Class": return NewClass();
                case "SubClass": return NewSubClass();
                case "FieldItem": return NewFieldItem();
                case "Property": return NewProperty();
                case "ButtonProperty": return NewButtonProperty();
                case "Is": return NewIs();
                case "Show": return NewShow();
                case "List": return NewList();
                case "Boolean": return NewBoolean();
                case "Integer": return NewInteger();
                case "DateTime": return NewDateTime();
                case "String": return NewString();
                case "Text": return NewText();
                case "Image": return NewImage();
                case "Icon": return NewIcon();
                case "Avatar": return NewAvatar();
                case "Count": return NewCount();
                case "Separator": return NewSeparator();
                case "Return": return NewReturn();
                case "Emphasis": return NewEmphasis();
                case "Button": return NewButton();
                case "Chooser": return NewChooser();
                case "ChooserOption": return NewChooserOption();
                case "Presentation": return NewPresentation();
                case "Section": return NewSection();
                case "SectionEntry": return NewSectionEntry();
                case "From": return NewFrom();
                case "Field": return NewField();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Html.Namespace NewNamespace() {
            Goedel.Html.Namespace result = new Goedel.Html.Namespace();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Html.Entry NewEntry() {
            Goedel.Html.Entry result = new Goedel.Html.Entry();
            Push (result);
            State = StateCode.Entry_Start;
            return result;
            }


        private Goedel.Html.Page NewPage() {
            Goedel.Html.Page result = new Goedel.Html.Page();
            Push (result);
            State = StateCode.Page_Start;
            return result;
            }


        private Goedel.Html.Menu NewMenu() {
            Goedel.Html.Menu result = new Goedel.Html.Menu();
            Push (result);
            State = StateCode.Menu_Start;
            return result;
            }


        private Goedel.Html.SubMenu NewSubMenu() {
            Goedel.Html.SubMenu result = new Goedel.Html.SubMenu();
            Push (result);
            State = StateCode.SubMenu_Start;
            return result;
            }


        private Goedel.Html.Selector NewSelector() {
            Goedel.Html.Selector result = new Goedel.Html.Selector();
            Push (result);
            State = StateCode.Selector_Start;
            return result;
            }


        private Goedel.Html.Class NewClass() {
            Goedel.Html.Class result = new Goedel.Html.Class();
            Push (result);
            State = StateCode.Class_Start;
            return result;
            }


        private Goedel.Html.SubClass NewSubClass() {
            Goedel.Html.SubClass result = new Goedel.Html.SubClass();
            Push (result);
            State = StateCode.SubClass_Start;
            return result;
            }


        private Goedel.Html.FieldItem NewFieldItem() {
            Goedel.Html.FieldItem result = new Goedel.Html.FieldItem();
            Push (result);
            State = StateCode.FieldItem_Start;
            return result;
            }


        private Goedel.Html.Property NewProperty() {
            Goedel.Html.Property result = new Goedel.Html.Property();
            Push (result);
            State = StateCode.Property_Start;
            return result;
            }


        private Goedel.Html.ButtonProperty NewButtonProperty() {
            Goedel.Html.ButtonProperty result = new Goedel.Html.ButtonProperty();
            Push (result);
            State = StateCode.ButtonProperty_Start;
            return result;
            }


        private Goedel.Html.Is NewIs() {
            Goedel.Html.Is result = new Goedel.Html.Is();
            Push (result);
            State = StateCode.Is_Start;
            return result;
            }


        private Goedel.Html.Show NewShow() {
            Goedel.Html.Show result = new Goedel.Html.Show();
            Push (result);
            State = StateCode.Show_Start;
            return result;
            }


        private Goedel.Html.List NewList() {
            Goedel.Html.List result = new Goedel.Html.List();
            Push (result);
            State = StateCode.List_Start;
            return result;
            }


        private Goedel.Html.Boolean NewBoolean() {
            Goedel.Html.Boolean result = new Goedel.Html.Boolean();
            Push (result);
            State = StateCode.Boolean_Start;
            return result;
            }


        private Goedel.Html.Integer NewInteger() {
            Goedel.Html.Integer result = new Goedel.Html.Integer();
            Push (result);
            State = StateCode.Integer_Start;
            return result;
            }


        private Goedel.Html.DateTime NewDateTime() {
            Goedel.Html.DateTime result = new Goedel.Html.DateTime();
            Push (result);
            State = StateCode.DateTime_Start;
            return result;
            }


        private Goedel.Html.String NewString() {
            Goedel.Html.String result = new Goedel.Html.String();
            Push (result);
            State = StateCode.String_Start;
            return result;
            }


        private Goedel.Html.Text NewText() {
            Goedel.Html.Text result = new Goedel.Html.Text();
            Push (result);
            State = StateCode.Text_Start;
            return result;
            }


        private Goedel.Html.Image NewImage() {
            Goedel.Html.Image result = new Goedel.Html.Image();
            Push (result);
            State = StateCode.Image_Start;
            return result;
            }


        private Goedel.Html.Icon NewIcon() {
            Goedel.Html.Icon result = new Goedel.Html.Icon();
            Push (result);
            State = StateCode.Icon_Start;
            return result;
            }


        private Goedel.Html.Avatar NewAvatar() {
            Goedel.Html.Avatar result = new Goedel.Html.Avatar();
            Push (result);
            State = StateCode.Avatar_Start;
            return result;
            }


        private Goedel.Html.Count NewCount() {
            Goedel.Html.Count result = new Goedel.Html.Count();
            Push (result);
            State = StateCode.Count_Start;
            return result;
            }


        private Goedel.Html.Separator NewSeparator() {
            Goedel.Html.Separator result = new Goedel.Html.Separator();
            Push (result);
            State = StateCode.Separator_Start;
            return result;
            }


        private Goedel.Html.Return NewReturn() {
            Goedel.Html.Return result = new Goedel.Html.Return();
            Push (result);
            State = StateCode.Return_Start;
            return result;
            }


        private Goedel.Html.Emphasis NewEmphasis() {
            Goedel.Html.Emphasis result = new Goedel.Html.Emphasis();
            Push (result);
            State = StateCode.Emphasis_Start;
            return result;
            }


        private Goedel.Html.Button NewButton() {
            Goedel.Html.Button result = new Goedel.Html.Button();
            Push (result);
            State = StateCode.Button_Start;
            return result;
            }


        private Goedel.Html.Chooser NewChooser() {
            Goedel.Html.Chooser result = new Goedel.Html.Chooser();
            Push (result);
            State = StateCode.Chooser_Start;
            return result;
            }


        private Goedel.Html.ChooserOption NewChooserOption() {
            Goedel.Html.ChooserOption result = new Goedel.Html.ChooserOption();
            Push (result);
            State = StateCode.ChooserOption_Start;
            return result;
            }


        private Goedel.Html.Presentation NewPresentation() {
            Goedel.Html.Presentation result = new Goedel.Html.Presentation();
            Push (result);
            State = StateCode.Presentation_Start;
            return result;
            }


        private Goedel.Html.Section NewSection() {
            Goedel.Html.Section result = new Goedel.Html.Section();
            Push (result);
            State = StateCode.Section_Start;
            return result;
            }


        private Goedel.Html.SectionEntry NewSectionEntry() {
            Goedel.Html.SectionEntry result = new Goedel.Html.SectionEntry();
            Push (result);
            State = StateCode.SectionEntry_Start;
            return result;
            }


        private Goedel.Html.From NewFrom() {
            Goedel.Html.From result = new Goedel.Html.From();
            Push (result);
            State = StateCode.From_Start;
            return result;
            }


        private Goedel.Html.Field NewField() {
            Goedel.Html.Field result = new Goedel.Html.Field();
            Push (result);
            State = StateCode.Field_Start;
            return result;
            }


        static Goedel.Html.FrameStructType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Html.FrameStructType.Namespace;
                case "Entry": return Goedel.Html.FrameStructType.Entry;
                case "Page": return Goedel.Html.FrameStructType.Page;
                case "Menu": return Goedel.Html.FrameStructType.Menu;
                case "SubMenu": return Goedel.Html.FrameStructType.SubMenu;
                case "Selector": return Goedel.Html.FrameStructType.Selector;
                case "Class": return Goedel.Html.FrameStructType.Class;
                case "SubClass": return Goedel.Html.FrameStructType.SubClass;
                case "FieldItem": return Goedel.Html.FrameStructType.FieldItem;
                case "Property": return Goedel.Html.FrameStructType.Property;
                case "ButtonProperty": return Goedel.Html.FrameStructType.ButtonProperty;
                case "Is": return Goedel.Html.FrameStructType.Is;
                case "Show": return Goedel.Html.FrameStructType.Show;
                case "List": return Goedel.Html.FrameStructType.List;
                case "Boolean": return Goedel.Html.FrameStructType.Boolean;
                case "Integer": return Goedel.Html.FrameStructType.Integer;
                case "DateTime": return Goedel.Html.FrameStructType.DateTime;
                case "String": return Goedel.Html.FrameStructType.String;
                case "Text": return Goedel.Html.FrameStructType.Text;
                case "Image": return Goedel.Html.FrameStructType.Image;
                case "Icon": return Goedel.Html.FrameStructType.Icon;
                case "Avatar": return Goedel.Html.FrameStructType.Avatar;
                case "Count": return Goedel.Html.FrameStructType.Count;
                case "Separator": return Goedel.Html.FrameStructType.Separator;
                case "Return": return Goedel.Html.FrameStructType.Return;
                case "Emphasis": return Goedel.Html.FrameStructType.Emphasis;
                case "Button": return Goedel.Html.FrameStructType.Button;
                case "Chooser": return Goedel.Html.FrameStructType.Chooser;
                case "ChooserOption": return Goedel.Html.FrameStructType.ChooserOption;
                case "Presentation": return Goedel.Html.FrameStructType.Presentation;
                case "Section": return Goedel.Html.FrameStructType.Section;
                case "SectionEntry": return Goedel.Html.FrameStructType.SectionEntry;
                case "From": return Goedel.Html.FrameStructType.From;
                case "Field": return Goedel.Html.FrameStructType.Field;

                }
            return Goedel.Html.FrameStructType._Bottom;
            }


		public void Serialize (TextWriter Output)=> Serialize (Output, OutputFormat.Goedel);

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Html._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Html._Choice Token) {
            _StackItem Item = new _StackItem () {
					State = State,
					Token = Current
					};

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.AssertFalse (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.AssertFalse (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Html.FrameStructType.Namespace)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) { 
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Namespace Current_Cast = (Goedel.Html.Namespace)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__NamespaceT, Current_Cast);
                            State = StateCode.Namespace__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Namespace__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Namespace Current_Cast = (Goedel.Html.Namespace)Current;
                            Current_Cast.Entries.Add (NewEntry ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Entry_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Entry Current_Cast = (Goedel.Html.Entry)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Entry__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Entry__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.Entry Current_Cast = (Goedel.Html.Entry)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.Page) |
									(LabelType == Goedel.Html.FrameStructType.Menu) |
									(LabelType == Goedel.Html.FrameStructType.Selector) |
									(LabelType == Goedel.Html.FrameStructType.Class) |
									(LabelType == Goedel.Html.FrameStructType.SubClass) ) {
                                State = StateCode.Entry__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Page Menu Selector Class SubClass ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Page Menu Selector Class SubClass ]");
                            }

                    case StateCode.Entry__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Page_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Html.Page Current_Cast = (Goedel.Html.Page)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.Page__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Page__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Page__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Page__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Page Current_Cast = (Goedel.Html.Page)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Menu_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Menu__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Menu__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Menu Current_Cast = (Goedel.Html.Menu)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SubMenu_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Html.SubMenu Current_Cast = (Goedel.Html.SubMenu)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.SubMenu__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.SubMenu__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.SubMenu__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.SubMenu__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.SubMenu Current_Cast = (Goedel.Html.SubMenu)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Selector_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Selector__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Selector__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Selector Current_Cast = (Goedel.Html.Selector)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Class_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Class__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Class__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Class Current_Cast = (Goedel.Html.Class)Current;
                            Current_Cast.Entries.Add (NewProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SubClass_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.SubClass Current_Cast = (Goedel.Html.SubClass)Current;
                            Current_Cast.Parent = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.SubClass__Parent;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.SubClass__Parent:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.SubClass__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.SubClass__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.SubClass Current_Cast = (Goedel.Html.SubClass)Current;
                            Current_Cast.Entries.Add (NewProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.FieldItem_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.FieldItem Current_Cast = (Goedel.Html.FieldItem)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.FieldItem__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.FieldItem__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.FieldItem Current_Cast = (Goedel.Html.FieldItem)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.Button) |
									(LabelType == Goedel.Html.FrameStructType.Chooser) |
									(LabelType == Goedel.Html.FrameStructType.Separator) |
									(LabelType == Goedel.Html.FrameStructType.SubMenu) |
									(LabelType == Goedel.Html.FrameStructType.Return) |
									(LabelType == Goedel.Html.FrameStructType.Is) |
									(LabelType == Goedel.Html.FrameStructType.Boolean) |
									(LabelType == Goedel.Html.FrameStructType.Integer) |
									(LabelType == Goedel.Html.FrameStructType.DateTime) |
									(LabelType == Goedel.Html.FrameStructType.String) |
									(LabelType == Goedel.Html.FrameStructType.Text) |
									(LabelType == Goedel.Html.FrameStructType.Image) |
									(LabelType == Goedel.Html.FrameStructType.Avatar) |
									(LabelType == Goedel.Html.FrameStructType.List) |
									(LabelType == Goedel.Html.FrameStructType.Selector) |
									(LabelType == Goedel.Html.FrameStructType.Count) |
									(LabelType == Goedel.Html.FrameStructType.Presentation) |
									(LabelType == Goedel.Html.FrameStructType.Show) |
									(LabelType == Goedel.Html.FrameStructType.Icon) ) {
                                State = StateCode.FieldItem__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Button Chooser Separator SubMenu Return Is Boolean Integer DateTime String Text Image Avatar List Selector Count Presentation Show Icon ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Button Chooser Separator SubMenu Return Is Boolean Integer DateTime String Text Image Avatar List Selector Count Presentation Show Icon ]");
                            }

                    case StateCode.FieldItem__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Property_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Property Current_Cast = (Goedel.Html.Property)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Property__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Property__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.Property Current_Cast = (Goedel.Html.Property)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.Is) |
									(LabelType == Goedel.Html.FrameStructType.Boolean) |
									(LabelType == Goedel.Html.FrameStructType.Integer) |
									(LabelType == Goedel.Html.FrameStructType.DateTime) |
									(LabelType == Goedel.Html.FrameStructType.String) |
									(LabelType == Goedel.Html.FrameStructType.Text) |
									(LabelType == Goedel.Html.FrameStructType.Image) |
									(LabelType == Goedel.Html.FrameStructType.List) |
									(LabelType == Goedel.Html.FrameStructType.Emphasis) |
									(LabelType == Goedel.Html.FrameStructType.Separator) |
									(LabelType == Goedel.Html.FrameStructType.SubMenu) |
									(LabelType == Goedel.Html.FrameStructType.Avatar) |
									(LabelType == Goedel.Html.FrameStructType.Presentation) |
									(LabelType == Goedel.Html.FrameStructType.Icon) ) {
                                State = StateCode.Property__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Is Boolean Integer DateTime String Text Image List Emphasis Separator SubMenu Avatar Presentation Icon ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Is Boolean Integer DateTime String Text Image List Emphasis Separator SubMenu Avatar Presentation Icon ]");
                            }

                    case StateCode.Property__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ButtonProperty_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.ButtonProperty Current_Cast = (Goedel.Html.ButtonProperty)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.ButtonProperty__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.ButtonProperty__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.ButtonProperty Current_Cast = (Goedel.Html.ButtonProperty)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.Boolean) |
									(LabelType == Goedel.Html.FrameStructType.Integer) |
									(LabelType == Goedel.Html.FrameStructType.String) ) {
                                State = StateCode.ButtonProperty__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Boolean Integer String ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Boolean Integer String ]");
                            }

                    case StateCode.ButtonProperty__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Is_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Is Current_Cast = (Goedel.Html.Is)Current;
                            Current_Cast.Parent = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Is__Parent;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Is__Parent:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Show_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Show Current_Cast = (Goedel.Html.Show)Current;
                            Current_Cast.Field = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Show__Field;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Show__Field:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Show Current_Cast = (Goedel.Html.Show)Current;
                            Current_Cast.Display = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Show__Display;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Show__Display:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.List_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.List Current_Cast = (Goedel.Html.List)Current;
                            Current_Cast.Of = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.List__Of;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.List__Of:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Boolean_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Integer_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.DateTime_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.String_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Text_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Image_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Icon_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Avatar_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Count_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Separator_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Return_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Return Current_Cast = (Goedel.Html.Return)Current;
                            Current_Cast.To = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Return__To;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Return__To:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Emphasis_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Button_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Button Current_Cast = (Goedel.Html.Button)Current;
                            Current_Cast.Action = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Button__Action;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Button__Action:
                        if (Token == TokenType.STRING) {
                            Goedel.Html.Button Current_Cast = (Goedel.Html.Button)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.Button__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Button__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Button__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Button__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Button Current_Cast = (Goedel.Html.Button)Current;
                            Current_Cast.Entries.Add (NewButtonProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Chooser_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Chooser__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Chooser__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Chooser Current_Cast = (Goedel.Html.Chooser)Current;
                            Current_Cast.Entries.Add (NewChooserOption ());
                            Represent = true;
                            }

                        break;


                    case StateCode.ChooserOption_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.ChooserOption Current_Cast = (Goedel.Html.ChooserOption)Current;
                            Current_Cast.Action = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.ChooserOption__Action;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.ChooserOption__Action:
                        if (Token == TokenType.STRING) {
                            Goedel.Html.ChooserOption Current_Cast = (Goedel.Html.ChooserOption)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.ChooserOption__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.ChooserOption__Title:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Presentation_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Presentation Current_Cast = (Goedel.Html.Presentation)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__Uid, Current_Cast);
                            State = StateCode.Presentation__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Presentation__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Presentation__Sections;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Presentation__Sections: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Presentation Current_Cast = (Goedel.Html.Presentation)Current;
                            Current_Cast.Sections.Add (NewSection ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Section_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Section Current_Cast = (Goedel.Html.Section)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Section__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Section__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Section__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Section__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Html.Section Current_Cast = (Goedel.Html.Section)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SectionEntry_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.SectionEntry Current_Cast = (Goedel.Html.SectionEntry)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.From) |
									(LabelType == Goedel.Html.FrameStructType.Field) ) {
                                State = StateCode.SectionEntry__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [From Field ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [From Field ]");
                            }

                    case StateCode.SectionEntry__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.From_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.From Current_Cast = (Goedel.Html.From)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.From__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.From__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Html.From Current_Cast = (Goedel.Html.From)Current;
                            Goedel.Html.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Html.FrameStructType.From) |
									(LabelType == Goedel.Html.FrameStructType.Field) ) {
                                State = StateCode.From__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [From Field ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [From Field ]");
                            }

                    case StateCode.From__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Field_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Html.Field Current_Cast = (Goedel.Html.Field)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Field__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Field__Id:
                        Pop ();
                        Represent = true; 
                        break;

                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}
#pragma warning restore IDE0022	

